PaGe: Parser Generator for LALR(1) Grammar for/by Common Lisp


      +-------------------------+
      | PaGe		        |
      |      +-----------+      |
      |  +-->|   PaGen   |---+  |
----->|--+   +-----------+   +->|----->
      |  +-------------------+  |
      |				|
      +-------------------------+




PaGe is a portable , compact and reliable LALR(1) parser generator.
PaGe consists of a parser generator engine PaGen and its wrapper .

PaGen is a pared parser-generator engine.
PaGen get a restricted type grammar whose ``symbols'' are non-negative integer as input.
This restriction 


Simple disambiguation mechanism:
 PaGen also can take ambiguous grammar as input i.e. it supports disambiguation.
PaGen's disambiguation mechanism is so simple.
First, we give two priority to each rule for reduce-time and shift-time.
Then, when a generated action-table has some conflict,
 we try to solve each conflicts by comparing priorities. 
Specifically, Reduce/Reduce-conflicts can be solved by reduce using the rule whose reduce-time priority is the greatest in conflicted rules.
 Shift/Reduce-conflicts can be solved in 2 pattern. 
First,  if the propagation-priority, calculated from some shift-time-priorities, is greater than the reduce-time-priority of the rule,
we solve the conflict by shift.
Second, if the reduce-time-priority of the rule is greater than the propagation-priority we solve the conflict by reduce using the rule.

This mechanism is more primitive than the method which specifies the associativity of an operator directly, in translatability sense.
And, dangling-else-probrem can be solved uniformly in this mechanism.

- 必要最低限の機能のみを備えたパーザジェネレータを実装したい
  ポータビリティを高めて様々な用途に気兼ねなく使えるように

- 


- しかし単体でもそれなりの機能を備えたものにしたい
  --> エンジン部分の PaGe-Core と、それに幾つかの機能を付け加えた PaGe

- CL-yacc や bison のような形式の入力への対応は Core のラッパーとして与える
  従来のパーザジェネレータと同様に利用できる PaGe と、その基盤である PaGe-Core の 2 層構造からなる

- PaGe-Core は入力形式を限定することでプログラムを単純且つ効率良く実装
  数値ベースの処理にしたことで配列を素直に利用できたり、
  非終端記号か否かの判定を数値の比較で実現できたりなどのメリットが得られた
  
- DeRemer の手法を採用し、アルゴリズムの面でも効率的に
  DeRemer の手法は理論的に綺麗なのだが、その実装はそれほど多くない
  アルゴリズムをわかりやすく、かつ簡潔に実装し、参考となるようなものを目指していた

- 曖昧性除去に関しても、演算子の結合性ではなく文法規則に注目することでより素朴な形で conflict を解決する
  入力文法の各文法規則について、Shift の際に参照される priority と Reduce の際に参照される priority 、2つの値を割り当てる。
  conflict の解決にはこの priority を利用する
  演算子の結合の強さや結合性についての情報はこの形式に翻訳可能できた
  従来の方法より素朴で自然な方法ではないかと考えている





